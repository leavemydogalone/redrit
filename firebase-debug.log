[debug] [2021-02-10T20:07:49.062Z] ----------------------------------------------------------------------
[debug] [2021-02-10T20:07:49.073Z] Command:       /home/niklas/.nvm/versions/node/v15.3.0/bin/node /home/niklas/.nvm/versions/node/v15.3.0/bin/firebase deploy
[debug] [2021-02-10T20:07:49.074Z] CLI Version:   9.3.0
[debug] [2021-02-10T20:07:49.074Z] Platform:      linux
[debug] [2021-02-10T20:07:49.074Z] Node Version:  v15.3.0
[debug] [2021-02-10T20:07:49.075Z] Time:          Wed Feb 10 2021 12:07:49 GMT-0800 (Pacific Standard Time)
[debug] [2021-02-10T20:07:49.075Z] ----------------------------------------------------------------------
[debug] [2021-02-10T20:07:49.076Z] 
[debug] [2021-02-10T20:07:49.084Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2021-02-10T20:07:49.084Z] > authorizing via signed-in user
[debug] [2021-02-10T20:07:49.084Z] [iam] checking project redrit-75871 for permissions ["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get","firebasehosting.sites.update"]
[debug] [2021-02-10T20:07:49.091Z] >>> HTTP REQUEST POST https://cloudresourcemanager.googleapis.com/v1/projects/redrit-75871:testIamPermissions  
 {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get","firebasehosting.sites.update"]}
[debug] [2021-02-10T20:07:49.601Z] <<< HTTP RESPONSE 200 {"content-type":"application/json; charset=UTF-8","vary":"X-Origin, Referer, Origin,Accept-Encoding","date":"Wed, 10 Feb 2021 20:08:20 GMT","server":"ESF","cache-control":"private","x-xss-protection":"0","x-frame-options":"SAMEORIGIN","x-content-type-options":"nosniff","server-timing":"gfet4t7; dur=206","alt-svc":"h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"","accept-ranges":"none","transfer-encoding":"chunked"}
[debug] [2021-02-10T20:07:49.604Z] > refreshing access token with scopes: []
[debug] [2021-02-10T20:07:49.604Z] >>> HTTP REQUEST POST https://www.googleapis.com/oauth2/v3/token  
 <request body omitted>
[debug] [2021-02-10T20:07:49.743Z] <<< HTTP RESPONSE 200 {"cache-control":"no-cache, no-store, max-age=0, must-revalidate","date":"Wed, 10 Feb 2021 20:08:20 GMT","pragma":"no-cache","expires":"Mon, 01 Jan 1990 00:00:00 GMT","content-type":"application/json; charset=utf-8","vary":"X-Origin, Referer, Origin,Accept-Encoding","server":"scaffolding on HTTPServer2","x-xss-protection":"0","x-frame-options":"SAMEORIGIN","x-content-type-options":"nosniff","alt-svc":"h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"","accept-ranges":"none","transfer-encoding":"chunked"}
[debug] [2021-02-10T20:07:49.747Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/redrit-75871 [none]
[debug] [2021-02-10T20:07:49.949Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/redrit-75871 200
[debug] [2021-02-10T20:07:49.949Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/redrit-75871 {"projectId":"redrit-75871","projectNumber":"439515708143","displayName":"redrit","name":"projects/redrit-75871","resources":{"hostingSite":"redrit-75871","storageBucket":"redrit-75871.appspot.com","locationId":"us-central"},"state":"ACTIVE"}
[info] 
[info] === Deploying to 'redrit-75871'...
[info] 
[info] i  deploying firestore, hosting 
[info] i  firestore: reading indexes from firestore.indexes.json... 
[info] i  cloud.firestore: checking firestore.rules for compilation errors... 
[debug] [2021-02-10T20:07:49.954Z] > refreshing access token with scopes: ["email","https://www.googleapis.com/auth/cloud-platform","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","openid"]
[debug] [2021-02-10T20:07:49.954Z] >>> HTTP REQUEST POST https://www.googleapis.com/oauth2/v3/token  
 <request body omitted>
[debug] [2021-02-10T20:07:50.060Z] <<< HTTP RESPONSE 200 {"expires":"Mon, 01 Jan 1990 00:00:00 GMT","cache-control":"no-cache, no-store, max-age=0, must-revalidate","date":"Wed, 10 Feb 2021 20:08:21 GMT","pragma":"no-cache","content-type":"application/json; charset=utf-8","vary":"X-Origin, Referer, Origin,Accept-Encoding","server":"scaffolding on HTTPServer2","x-xss-protection":"0","x-frame-options":"SAMEORIGIN","x-content-type-options":"nosniff","alt-svc":"h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"","accept-ranges":"none","transfer-encoding":"chunked"}
[debug] [2021-02-10T20:07:50.063Z] >>> HTTP REQUEST POST https://firebaserules.googleapis.com/v1/projects/redrit-75871:test  
 {"source":{"files":[{"name":"firestore.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /groups /{itemId} {\n      allow read: if true;\n      allow create: if isSignedIn();\n      allow update: if false;\n      allow delete: if false;\n      \n    }\n    match /comments /{itemId} {\n      allow read: if true;\n      allow create: if isSignedIn();\n      allow update: if isSignedIn();\n      allow delete: if isSignedIn();\n      \n    }\n    match /users/{itemId}{\n\n      allow read: if true\n\n      allow create: if isValidUser(request.resource.data) &&\n        isSignedIn() &&\n        checkKeys();\n\n      allow update: if \n      isValidUser(request.resource.data) &&\n        isOwner(request.resource.data) &&\n        isOwner(resource.data) &&\n        isSignedIn() &&\n        isCalm() &&\n        checkKeys();\n\n      allow delete: if isOwner(resource.data) &&\n        isSignedIn();\n\n      // FUNCTIONS\n  \n      function isOwner(user) {\n        return request.auth.uid == user.uid;\n      }\n  \n      function isValidUser(user) {\n        return (\n          // user.uid\n          user.uid is string &&\n          user.uid != '' &&\n          // user.subscribedFeeds\n          user.subscribedFeeds is list &&\n          user.subscribedFeeds != '' &&\n          // user.displayName\n          user.displayName is string &&\n          user.displayName != '' &&\n          // user.createdAt\n          user.createdAt is timestamp &&\n          user.createdAt != '' &&\n          // user.lastUpdate\n          user.lastUpdate is timestamp &&\n          user.lastUpdate != '' \n          \n        );\n      }\n\n      function isCalm() {\n        return ( \n          request.time > resource.data.lastUpdate +\n          duration.value(5, 's')\n        ); \n      }\n\n      function checkKeys() {\n        let requiredFields = ['uid','subscribedFeeds','displayName', 'lastUpdate', 'createdAt'];\n        let optionalFields = [];\n        let allFields = requiredFields.concat(optionalFields);\n        return request.resource.data.keys().hasAll(requiredFields) &&\n        request.resource.data.keys().hasOnly(allFields)\n      }\n    }\n    \n      \n    \n\n    match /posts/{itemId} {\n\n      allow read: if true;\n\n// check profile for the time of last submitted post and limit that to one per minute\n      allow create: if isValidPost(request.resource.data) &&\n        isOwner(request.resource.data) &&\n        isSignedIn() &&\n        checkKeys();\n\n      allow update: if isSignedIn() &&\n        isCalm() &&\n        isValidPost(request.resource.data) &&\n        isOwner(request.resource.data) &&\n        isOwner(resource.data) &&\n        checkKeys();\n\n      allow delete: if isOwner(resource.data) &&\n        isSignedIn();\n\n      // FUNCTIONS\n  \n      function isOwner(post) {\n        return request.auth.uid == post.uid;\n      }\n  \n      function isValidPost(post) {\n        return (\n          // post.title\n          post.title is string &&\n          post.title != '' &&\n          // post.content\n          post.content is string &&\n          post.content != '' &&\n          // post.group\n          post.group is string &&\n          post.group != '' &&\n          // post.contentType\n          post.contentType is string &&\n          post.contentType != '' &&\n          // post.createdAt\n          post.createdAt is timestamp &&\n          post.createdAt != '' &&\n          // post.lastUpdate\n          post.lastUpdate is timestamp &&\n          post.lastUpdate != '' &&\n          // post.uid\n          post.uid is string &&\n          post.uid != '' &&\n          // post.user\n          post.user is string &&\n          post.user != '' &&\n          // post.id\n          post.id is string &&\n          post.id != '' &&\n          // post.comments\n          post.comments is number &&\n          post.comments != '' &&\n          // post.votes\n          post.votes is number &&\n          post.votes == 1 &&\n          post.votes != '' \n        );\n      }\n\n      function isCalm() {\n        return ( \n          request.time > resource.data.lastUpdate +\n          duration.value(10, 's')\n        ); \n      }\n\n      function checkKeys() {\n        let requiredFields = ['title','content','group','contentType','createdAt','lastUpdate','uid','user','id','comments','votes'];\n        let optionalFields = [];\n        let allFields = requiredFields.concat(optionalFields);\n        return request.resource.data.keys().hasAll(requiredFields) &&\n        request.resource.data.keys().hasOnly(allFields)\n      }\n    }\n\n    match /posts/{itemId} {\n      match /comments/{itemId} {\n        allow read: if true\n\n      allow create: if isValidComment(request.resource.data) &&\n        isSignedIn() &&\n        checkKeys();\n\n      allow update: if isValidComment(request.resource.data) &&\n        isOwner(request.resource.data) &&\n        isOwner(resource.data) &&\n        isSignedIn() &&\n        isCalm() &&\n        checkKeys();\n\n      allow delete: if isOwner(resource.data) &&\n        isSignedIn();\n\n      // FUNCTIONS\n  \n      function isOwner(comment) {\n        return request.auth.uid == comment.uid;\n      }\n\n      function isValidComment(comment) {\n        return (\n          // comment.content\n          comment.content is string &&\n          comment.content != '' &&\n          // comment.id\n          comment.id is string &&\n          comment.id != '' &&\n          // comment.lastUpdate\n          comment.lastUpdate is timestamp &&\n          comment.lastUpdate != '' &&\n          // comment.post\n          comment.post is string &&\n          comment.post != '' &&\n          // comment.user\n          comment.user is string &&\n          comment.user != '' &&\n          // comment.uid\n          comment.uid is string &&\n          comment.uid != '' &&\n          // comment.votes\n          comment.votes is number &&\n          comment.votes == 1 &&\n          comment.votes != '' &&\n          // comment.createdAt\n          comment.createdAt is timestamp &&\n          comment.createdAt != '' &&\n          comment.parentId == null || \n          comment.parentId is string &&\n          comment.parentId != ''\n        );\n      }\n      \n      function isCalm() {\n        return ( \n          request.time > resource.data.lastUpdate +\n          duration.value(5, 's')\n        ); \n      }\n\n      function checkKeys() {\n        let requiredFields = ['content','id','lastUpdate','parentId', 'post','user','uid','votes','createdAt'];\n        let optionalFields = [];\n        let allFields = requiredFields.concat(optionalFields);\n        return request.resource.data.keys().hasAll(requiredFields) &&\n        request.resource.data.keys().hasOnly(allFields)\n      }\n      }\n    }\n\n    match /votes/{itemId} {\n        \n        allow read: if true;\n          \n\n        allow create: if isValidVote(request.resource.data) &&\n          isOwner(request.resource.data) &&\n          isSignedIn() &&\n          checkKeys();\n\n        allow update: if isValidVote(request.resource.data) &&\n          isOwner(request.resource.data) &&\n          isOwner(resource.data) &&\n          isSignedIn() &&\n          checkKeys();\n\n        allow delete: if isOwner(resource.data) &&\n          isSignedIn();\n\n        // FUNCTIONS\n      \n    \n        function isOwner(vote) {\n          return request.auth.uid == vote.uid;\n        }\n    \n        function isValidVote(vote) {\n          return (\n            // vote.type\n            vote.type is string &&\n            vote.type != '' &&\n            // vote.voteId\n            vote.voteId is string &&\n            vote.voteId != '' &&\n            // vote.uid\n            vote.uid is string &&\n            vote.uid != '' &&\n            // vote.direction\n            vote.direction is string &&\n            vote.direction != '' &&\n            // vote.parentId \n            vote.parentId is string &&\n            vote.parentId != ''\n\n          );\n        }\n\n        function checkKeys() {\n          let requiredFields = ['type','voteId', 'uid', 'direction', 'parentId'];\n          let optionalFields = [];\n          let allFields = requiredFields.concat(optionalFields);\n          return request.resource.data.keys().hasAll(requiredFields) &&\n          request.resource.data.keys().hasOnly(allFields)\n        }\n      }\n\n    function isSignedIn() {\n      return request.auth != null;\n    }\n    \n    \n  }\n}"}]}}
[debug] [2021-02-10T20:07:50.658Z] <<< HTTP RESPONSE 200 {"content-type":"application/json; charset=UTF-8","vary":"X-Origin, Referer, Origin,Accept-Encoding","date":"Wed, 10 Feb 2021 20:08:21 GMT","server":"ESF","cache-control":"private","x-xss-protection":"0","x-frame-options":"SAMEORIGIN","x-content-type-options":"nosniff","alt-svc":"h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"","accept-ranges":"none","transfer-encoding":"chunked"}
[info] ✔  cloud.firestore: rules file firestore.rules compiled successfully 
[debug] [2021-02-10T20:07:50.664Z] >>> HTTP REQUEST POST https://firebasehosting.googleapis.com/v1beta1/sites/redrit-75871/versions  
 {"config":{"rewrites":[{"glob":"**","path":"/index.html"}]},"labels":{"deployment-tool":"cli-firebase"}}
[debug] [2021-02-10T20:07:51.505Z] <<< HTTP RESPONSE 200 {"content-type":"application/json; charset=UTF-8","vary":"X-Origin, Referer, Origin,Accept-Encoding","date":"Wed, 10 Feb 2021 20:08:22 GMT","server":"ESF","cache-control":"private","x-xss-protection":"0","x-frame-options":"SAMEORIGIN","x-content-type-options":"nosniff","alt-svc":"h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"","accept-ranges":"none","transfer-encoding":"chunked"}
[debug] [2021-02-10T20:07:51.507Z] >>> HTTP REQUEST GET https://firebaserules.googleapis.com/v1/projects/redrit-75871/releases?pageSize=10&pageToken=  
 
[debug] [2021-02-10T20:07:51.508Z] >>> HTTP REQUEST GET https://firestore.googleapis.com/v1/projects/redrit-75871/databases/(default)/collectionGroups/-/indexes  
 
[debug] [2021-02-10T20:07:51.940Z] <<< HTTP RESPONSE 200 {"content-type":"application/json; charset=UTF-8","vary":"X-Origin, Referer, Origin,Accept-Encoding","date":"Wed, 10 Feb 2021 20:08:22 GMT","server":"ESF","cache-control":"private","x-xss-protection":"0","x-frame-options":"SAMEORIGIN","x-content-type-options":"nosniff","alt-svc":"h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"","accept-ranges":"none","transfer-encoding":"chunked"}
[debug] [2021-02-10T20:07:51.941Z] >>> HTTP REQUEST GET https://firebaserules.googleapis.com/v1/projects/redrit-75871/rulesets/945478eb-858c-4e50-9597-733c31250737  
 
[debug] [2021-02-10T20:07:52.087Z] <<< HTTP RESPONSE 200 {"content-type":"application/json; charset=UTF-8","vary":"X-Origin, Referer, Origin,Accept-Encoding","date":"Wed, 10 Feb 2021 20:08:23 GMT","server":"ESF","cache-control":"private","x-xss-protection":"0","x-frame-options":"SAMEORIGIN","x-content-type-options":"nosniff","alt-svc":"h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"","accept-ranges":"none","transfer-encoding":"chunked"}
[debug] [2021-02-10T20:07:52.087Z] >>> HTTP REQUEST GET https://firestore.googleapis.com/v1/projects/redrit-75871/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false  
 
[debug] [2021-02-10T20:07:52.267Z] <<< HTTP RESPONSE 200 {"content-type":"application/json; charset=UTF-8","vary":"X-Origin, Referer, Origin,Accept-Encoding","date":"Wed, 10 Feb 2021 20:08:23 GMT","server":"ESF","cache-control":"private","x-xss-protection":"0","x-frame-options":"SAMEORIGIN","x-content-type-options":"nosniff","alt-svc":"h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"","accept-ranges":"none","transfer-encoding":"chunked"}
[info] i  firestore: latest version of firestore.rules already up to date, skipping upload... 
[debug] [2021-02-10T20:07:52.621Z] <<< HTTP RESPONSE 200 {"content-type":"application/json; charset=UTF-8","vary":"X-Origin, Referer, Origin,Accept-Encoding","date":"Wed, 10 Feb 2021 20:08:23 GMT","server":"ESF","cache-control":"private","x-xss-protection":"0","x-frame-options":"SAMEORIGIN","x-content-type-options":"nosniff","alt-svc":"h3-29=\":443\"; ma=2592000,h3-T051=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"","accept-ranges":"none","transfer-encoding":"chunked"}
[info] i  firestore: The following indexes are defined in your project but are not present in your firestore indexes file:
	(posts) -- (group,ASCENDING) (createdAt,ASCENDING) 
	(posts) -- (group,ASCENDING) (createdAt,DESCENDING)  
