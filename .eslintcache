[{"/home/niklas/redrit/src/index.js":"1","/home/niklas/redrit/src/components/Post.js":"2","/home/niklas/redrit/src/pages/App.js":"3","/home/niklas/redrit/src/Routes.js":"4","/home/niklas/redrit/src/pages/Profile.js":"5","/home/niklas/redrit/src/pages/Comments.js":"6","/home/niklas/redrit/src/pages/PostForm.js":"7","/home/niklas/redrit/src/components/Comment.js":"8","/home/niklas/redrit/src/auth/Auth.js":"9","/home/niklas/redrit/src/auth/Login.js":"10","/home/niklas/redrit/src/components/LoginOutButton.js":"11","/home/niklas/redrit/src/components/ChildCommentForm.js":"12","/home/niklas/redrit/src/methods/commentMethods.js":"13","/home/niklas/redrit/src/methods/firebaseMethods.js":"14","/home/niklas/redrit/src/components/NewGroupForm.js":"15","/home/niklas/redrit/src/components/Spinner.js":"16","/home/niklas/redrit/src/components/SuccessPopUp.js":"17","/home/niklas/redrit/src/components/VoteArrow.js":"18","/home/niklas/redrit/src/methods/voteMethods.js":"19","/home/niklas/redrit/src/components/UpdatePopUp.js":"20","/home/niklas/redrit/src/methods/validationMethods.js":"21"},{"size":262,"mtime":1607714768133,"results":"22","hashOfConfig":"23"},{"size":2856,"mtime":1612910661021,"results":"24","hashOfConfig":"23"},{"size":2342,"mtime":1612910668728,"results":"25","hashOfConfig":"23"},{"size":2387,"mtime":1612908901359,"results":"26","hashOfConfig":"23"},{"size":2541,"mtime":1612905833398,"results":"27","hashOfConfig":"23"},{"size":3742,"mtime":1612463545145,"results":"28","hashOfConfig":"23"},{"size":4860,"mtime":1612908804368,"results":"29","hashOfConfig":"23"},{"size":3245,"mtime":1612544965204,"results":"30","hashOfConfig":"23"},{"size":725,"mtime":1611943749400,"results":"31","hashOfConfig":"23"},{"size":3686,"mtime":1612828965732,"results":"32","hashOfConfig":"23"},{"size":791,"mtime":1611859674062,"results":"33","hashOfConfig":"23"},{"size":1988,"mtime":1611259267731,"results":"34","hashOfConfig":"23"},{"size":1207,"mtime":1611180160157,"results":"35","hashOfConfig":"23"},{"size":4180,"mtime":1612907125916,"results":"36","hashOfConfig":"23"},{"size":464,"mtime":1611697602830,"results":"37","hashOfConfig":"23"},{"size":197,"mtime":1611781219839,"results":"38","hashOfConfig":"23"},{"size":125,"mtime":1611864859956,"results":"39","hashOfConfig":"23"},{"size":1715,"mtime":1612478616508,"results":"40","hashOfConfig":"23"},{"size":52,"mtime":1611940986265,"results":"41","hashOfConfig":"23"},{"size":2714,"mtime":1612906435062,"results":"42","hashOfConfig":"23"},{"size":884,"mtime":1612826455528,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"ebgawu",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/niklas/redrit/src/index.js",[],["88","89","90","91","92"],"/home/niklas/redrit/src/components/Post.js",[],"/home/niklas/redrit/src/pages/App.js",[],"/home/niklas/redrit/src/Routes.js",[],"/home/niklas/redrit/src/pages/Profile.js",[],"/home/niklas/redrit/src/pages/Comments.js",[],"/home/niklas/redrit/src/pages/PostForm.js",[],"/home/niklas/redrit/src/components/Comment.js",[],"/home/niklas/redrit/src/auth/Auth.js",[],"/home/niklas/redrit/src/auth/Login.js",[],"/home/niklas/redrit/src/components/LoginOutButton.js",[],"/home/niklas/redrit/src/components/ChildCommentForm.js",[],"/home/niklas/redrit/src/methods/commentMethods.js",[],"/home/niklas/redrit/src/methods/firebaseMethods.js",["93","94","95"],"import firebase from '../firebase';\n\nconst backgroundRef = firebase.storage().ref('prism.png');\nconst postsRef = firebase.firestore().collection('posts');\nconst commentsRef = firebase.firestore().collection('comments');\nconst usersRef = firebase.firestore().collection('users');\nconst groupsRef = firebase.firestore().collection('groups');\nconst votesRef = firebase.firestore().collection('votes');\n\n// must add the doc to the person's profile as well for posts and comments\nexport function getBackground(setBackgroundUrl) {\n  backgroundRef\n    .getDownloadURL()\n    .then((url) => {\n      setBackgroundUrl(url);\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n}\n\nexport function addPost(newPost) {\n  postsRef\n    .doc(newPost.id)\n    .set(newPost)\n    .catch((err) => {\n      console.log(err);\n      alert('Please make sure all fields are filled out!');\n    });\n}\n\nexport function getPostData(docRef, setPostData) {\n  docRef.onSnapshot((doc) => {\n    setPostData(doc.data());\n  });\n}\n\n// subscription to all comments of this post for real time updates\nexport function getCommentsData(postCommentsRef, setCommentsData) {\n  postCommentsRef.onSnapshot((querySnapShot) => {\n    const items = [];\n    querySnapShot.forEach((doc) => {\n      items.push(doc.data());\n    });\n    setCommentsData(items);\n  });\n}\n\nexport function addComment(postCommentsRef, newComment) {\n  postCommentsRef\n    .doc(newComment.id)\n    .set(newComment)\n    .catch((err) => {\n      console.log(err);\n      alert('Please make sure all fields are filled out!');\n    });\n}\n\nexport function getAllUsersData(setAllUsersData) {\n  usersRef\n    .get()\n    .then((querySnapshot) => {\n      const items = [];\n      querySnapshot.forEach((doc) => {\n        items.push(doc.data());\n      });\n      setAllUsersData(items);\n    })\n    .catch((error) => {\n      console.log('Error getting documents: ', error);\n    });\n}\n\nexport function addGroup(newGroup) {\n  groupsRef\n    .doc(newGroup.title)\n    .set(newGroup)\n    .catch((err) => {\n      console.log(err);\n      alert('Could not add new group');\n    });\n}\n\n// single get of either all posts or for a specific feed and orders them by recency\nexport function getPosts(setLoading, setPosts, feed) {\n  // determines if it needs to pull all posts or just for a specific group\n  function allOrOneFeed() {\n    if (feed === 'all') return postsRef;\n    return postsRef.where('group', '==', feed);\n  }\n\n  setLoading(true);\n  allOrOneFeed()\n    .orderBy('createdAt', 'desc')\n    .get()\n    .then((querySnapshot) => {\n      const items = [];\n      querySnapshot.forEach((doc) => {\n        items.push(doc.data());\n      });\n      setPosts(items);\n      setLoading(false);\n    })\n    .catch((err) => console.log(err));\n}\n\nexport function getFeeds(setFeedsData) {\n  groupsRef.get().then((querySnapshot) => {\n    const items = [];\n    querySnapshot.forEach((doc) => {\n      items.push(doc.data().title);\n    });\n    setFeedsData(items);\n  });\n}\n\nexport function getVotes(setVotes, type) {\n  // function postsOrComment(){\n  //   if(type == 'post') return votesRef\n  //   return votesRef.where('postId', '==', postId)\n  // }\n  // would need to make another function for commentVotes,\n  // because would need postId as additional param and would need to get\n  // the post's votes. Also would need to change vote objects sent to db\n  // with new key: postId\n  // or maybe not. can just use docs whose parentId show up in commentsData\n  votesRef.where('type', '==', type).onSnapshot((querySnapShot) => {\n    const items = [];\n    querySnapShot.forEach((doc) => {\n      items.push(doc.data());\n    });\n    setVotes(items);\n  });\n}\n\nexport function addVote(uid, id, voteObj) {\n  votesRef\n    .doc(voteObj.voteId)\n    .set(voteObj)\n    .catch((err) => console.log(err));\n  // need to update the post/comments votes as well\n}\n\nexport function deleteVote(voteId) {\n  votesRef\n    .doc(voteId)\n    .delete()\n    .catch((err) => console.log(err));\n  // might want to add a new key user with lastUpvote, downvote to slow it down\n}\n\nexport function deletePost(postId, handleError) {\n  postsRef\n    .doc(postId)\n    .delete()\n    .catch((err) => {\n      handleError(err);\n    });\n}\n","/home/niklas/redrit/src/components/NewGroupForm.js",[],"/home/niklas/redrit/src/components/Spinner.js",[],"/home/niklas/redrit/src/components/SuccessPopUp.js",[],"/home/niklas/redrit/src/components/VoteArrow.js",[],"/home/niklas/redrit/src/methods/voteMethods.js",[],"/home/niklas/redrit/src/components/UpdatePopUp.js",[],"/home/niklas/redrit/src/methods/validationMethods.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":28,"column":7,"nodeType":"108","messageId":"109","endLine":28,"endColumn":59},{"ruleId":"106","severity":1,"message":"107","line":55,"column":7,"nodeType":"108","messageId":"109","endLine":55,"endColumn":59},{"ruleId":"106","severity":1,"message":"107","line":80,"column":7,"nodeType":"108","messageId":"109","endLine":80,"endColumn":39},"lines-around-directive",["110"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-alert","Unexpected alert.","CallExpression","unexpected","padding-line-between-statements"]