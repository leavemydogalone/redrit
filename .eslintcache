[{"/home/niklas/redrit/src/index.js":"1","/home/niklas/redrit/src/components/Post.js":"2","/home/niklas/redrit/src/components/TopBanner.js":"3","/home/niklas/redrit/src/pages/App.js":"4","/home/niklas/redrit/src/Routes.js":"5","/home/niklas/redrit/src/pages/Profile.js":"6","/home/niklas/redrit/src/pages/Comments.js":"7","/home/niklas/redrit/src/pages/PostForm.js":"8","/home/niklas/redrit/src/components/Comment.js":"9"},{"size":262,"mtime":1607714768133,"results":"10","hashOfConfig":"11"},{"size":717,"mtime":1608657215408,"results":"12","hashOfConfig":"11"},{"size":185,"mtime":1607624829951,"results":"13","hashOfConfig":"11"},{"size":1072,"mtime":1608657419784,"results":"14","hashOfConfig":"11"},{"size":1332,"mtime":1608658000044,"results":"15","hashOfConfig":"11"},{"size":100,"mtime":1607713508869,"results":"16","hashOfConfig":"11"},{"size":1267,"mtime":1608669257606,"results":"17","hashOfConfig":"11"},{"size":2811,"mtime":1608314982551,"results":"18","hashOfConfig":"11"},{"size":487,"mtime":1608669626890,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"14qg06o",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/niklas/redrit/src/index.js",[],["40","41","42","43","44"],"/home/niklas/redrit/src/components/Post.js",[],"/home/niklas/redrit/src/components/TopBanner.js",[],"/home/niklas/redrit/src/pages/App.js",[],"/home/niklas/redrit/src/Routes.js",[],"/home/niklas/redrit/src/pages/Profile.js",[],"/home/niklas/redrit/src/pages/Comments.js",["45","46"],"/home/niklas/redrit/src/pages/PostForm.js",["47"],"import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport firebase from '../firebase';\n\nexport default function PostForm() {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('Enter text/url of image here...');\n  const [group, setGroup] = useState('');\n  const [contentType, setContentType] = useState('');\n  // must add a funtion that pulls the different groups,\n  // or maybe just let them contentType it in and let them create new ones if none exist\n\n  // maybe make a newgroup state and when the new group is selected\n  // from the select then a text is created and the value of the NewGroup from the 'select'\n  const postsRef = firebase.firestore().collection('posts');\n\n  function addPost(newPost) {\n    postsRef\n      .doc(newPost.id)\n      .set(newPost)\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  return (\n    <div className=\"postForm\" data-testid=\"PostForm\">\n      <h3>Add new post!</h3>\n      <label htmlFor=\"group\">\n        Group:\n        <select\n          name=\"group\"\n          id=\"group\"\n          value={group}\n          onChange={(e) => setGroup(e.target.value)}\n        >\n          <option value=\"\">Choose Here:</option>\n          <option value=\"dogs\">dogs</option>\n          <option value=\"newGroup\">Enter New Group!</option>\n        </select>\n      </label>\n\n      <label htmlFor=\"contentType\">\n        Content type:\n        <select\n          name=\"contentType\"\n          id=\"contentType\"\n          value={contentType}\n          onChange={(e) => setContentType(e.target.value)}\n        >\n          <option value=\"\">Choose Here:</option>\n          <option value=\"text\">text</option>\n          <option value=\"image\">image</option>\n        </select>\n      </label>\n\n      <label htmlFor=\"title\">\n        Title:\n        <input\n          name=\"title\"\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </label>\n\n      <label htmlFor=\"content\">\n        <textarea\n          name=\"content\"\n          // defaultValue=\"Enter text here...\"\n          value={content}\n          onFocus={(e) => {\n            if (e.target.value === 'Enter text/url of image here...') {\n              setContent('');\n            }\n          }}\n          onChange={(e) => setContent(e.target.value)}\n        />\n      </label>\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          addPost({\n            title,\n            group,\n            content,\n            id: uuidv4(),\n            contentType,\n            timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\n          });\n          setTitle('');\n          setGroup('');\n          setContent('');\n          setContentType('');\n        }}\n      >\n        Submit\n      </button>\n    </div>\n  );\n}\n","/home/niklas/redrit/src/components/Comment.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":21,"column":11,"nodeType":"60","messageId":"61","endLine":21,"endColumn":22},{"ruleId":"58","severity":1,"message":"59","line":25,"column":9,"nodeType":"60","messageId":"61","endLine":25,"endColumn":20},{"ruleId":"58","severity":1,"message":"59","line":22,"column":9,"nodeType":"60","messageId":"61","endLine":22,"endColumn":20},"lines-around-directive",["62"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements"]